<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NOTE: Drop this object into an empty room.

if (!libmulti_present()) {
    show_error("libmulti: Cannot load the DLL, demo will quit.", true);
    game_end();
    exit;
}

window_set_caption("libmulti demo.");
window_set_min_width(640);
window_set_min_height(240);
window_set_size(640, 240);
//alarm[0] = 15; // window_center() delay

wndclass = libmulti_init();
libmulti_set_game_window(window_handle());

seed = randomize();
windows = ds_list_create();
buffers = ds_list_create();
inputs = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///window_center();
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resize the demo room to the game window

var _ww, _wh;
_ww = window_get_width();
_wh = window_get_height();

if (room_width != _ww || room_height != _wh) {
    room_width = _ww;
    room_height = _wh;
    surface_resize(application_surface, _ww, _wh);
    show_debug_message("main window resize");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///An example of handling libmulti events.

var _ev_type;

// just in case it's undefined, it will turn into a string "&lt;undefined&gt;"
// which will be an unknown event.
_ev_type = string(ds_map_find_value(async_load, "event_type"));

switch (_ev_type) {
    case "libmulti_mouseenter": {
        var _w, _x, _y; _w = ds_map_find_value(async_load, "window");
        _x = ds_map_find_value(async_load, "x");
        _y = ds_map_find_value(async_load, "y");
        libmulti_set_caption(_w, "wow you care about me! x=" + string(_x) + ",y=" + string(_y));
        break;
    }
    
    case "libmulti_mousehover": {
        var _w, _x, _y; _w = ds_map_find_value(async_load, "window");
        _x = ds_map_find_value(async_load, "x");
        _y = ds_map_find_value(async_load, "y");
        libmulti_set_caption(_w, "why are you... hovering your mouse? x=" + string(_x) + ",y=" + string(_y));
        break;
    }
    
    case "libmulti_mouseleave": {
        var _w; _w = ds_map_find_value(async_load, "window");
        libmulti_set_caption(_w, "d-don't leave me! I'm all alone... :(");
        break;
    }
    
    case "libmulti_close": {
        var _w; _w = ds_map_find_value(async_load, "window");
        show_debug_message("a window is going to close soon, id=" + string(_w));
        // can't do much :(
        break;
    }
    
    case "libmulti_destroy": {
        // need to free the window.
        var _w; _w = ds_map_find_value(async_load, "window");
        var _i; _i = ds_list_find_index(windows, _w);
        if (_i &lt; 0) {
            show_debug_message("Wtf? window id=" + string(_w));
            break;
        }
        
        ds_list_delete(windows, _i);
        buffer_delete(ds_list_find_value(buffers, _i));
        ds_list_delete(buffers, _i);
        ds_list_delete(inputs, _i);
        show_debug_message("Freed window id=" + string(_w));
        break;
    }
    
    case "libmulti_size": {
        var _w, _nw, _nh; _w = ds_map_find_value(async_load, "window");
        _nw = ds_map_find_value(async_load, "new_width");
        _nh = ds_map_find_value(async_load, "new_height");
        
        libmulti_set_caption(_w, "aw, you changed my size, w=" + string(_nw) + ",h=" + string(_nh));
        break;
    }
    
    case "libmulti_pastetext": {
        var _w, _pos, _text; _w = ds_map_find_value(async_load, "window");
        _text = ds_map_find_value(async_load, "contents");
        if (!is_string(_text)) break; // ignore, either an invalid paste event or some winapi error has occurred.
        _pos = ds_list_find_index(windows, _w);
        if (_pos &lt; 0) {
            show_debug_message("[paste] Wtf? window id=" + string(_w));
            break;
        }
        
        // append paste text to the current keyboard string input...
        ds_list_replace(inputs, _pos,
            ds_list_find_value(inputs, _pos) + _text
        );
        
        break;
    }
    
    case "libmulti_input": {
        // handle keyboard input in a window.
        var _w, _raw, _str, _pos, _instr, _inlen; _w = ds_map_find_value(async_load, "window");
        _raw = ds_map_find_value(async_load, "character");
        _str = ds_map_find_value(async_load, "as_string");
        _pos = ds_list_find_index(windows, _w);
        if (_pos &lt; 0) {
            show_debug_message("[input] Wtf? window id=" + string(_w));
            break;
        }
        
        _instr = ds_list_find_value(inputs, _pos);
        _inlen = string_length(_instr);
        
        switch (_raw) {
            case $1B: {
                // handle the escape key, you can do something different idk
                libmulti_destroy(_w);
                break;
            }
            
            case $09: {
                // no idea how to handle this one.
                show_debug_message("libmulti Tab key, window id=" + string(_w));
                break;
            }
            
            case $0D: {
                var nl; nl = chr($0A); // always use the 0A newline, not 0D.
                ds_list_replace(
                    inputs, _pos,
                    _instr + nl
                );
                break;
            }
            
            case $08: {
                // backspace, here we simply delete last character
                ds_list_replace(
                    inputs, _pos,
                    string_delete(_instr, _inlen, 1)
                );
                break;
            }
            
            default: {
                // normal printable character.
                ds_list_replace(
                    inputs, _pos,
                    _instr + _str
                );
                
                break;
            }
        }
        
        break;
    }
    
    // mouse events:
    case "libmulti_leftup": // Left Pressed
    case "libmulti_leftdown": // Left Released
    case "libmulti_rightup": // Right Pressed
    case "libmulti_rightdown": // Right Released
    case "libmulti_middleup": // Wheel Pressed
    case "libmulti_middledown": // Wheel Released
    {
        var _w, _x, _y; _w = ds_map_find_value(async_load, "window");
        _x = ds_map_find_value(async_load, "x");
        _y = ds_map_find_value(async_load, "y");
        libmulti_set_caption(_w, "hehe it tickles ^^' mx=" + string(_x) + ",my=" + string(_y) + ",event_type=" + _ev_type);
        // feel free to implement your own 'hold' event based on this...
        break;
    }
    
    default: {
        // meh...
        show_debug_message("ignored libmulti event as json:");
        show_debug_message(json_encode(async_load));
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free all allocated resources.

var ok, iw, ib;

for (var i = 0; i &lt; ds_list_size(windows); i++) {
    iw = ds_list_find_value(windows, i);
    ib = ds_list_find_value(buffers, i);
    if (libmulti_exists(iw)) {
        show_debug_message("Destroying window id=" + string(iw));
        libmulti_destroy(iw);
    }
    
    if (buffer_exists(ib)) {
        show_debug_message("Freeing image buffer id=" + string(ib));
        buffer_delete(ib);
    }
}

ds_list_clear(inputs);

ds_list_destroy(windows);
ds_list_destroy(inputs);
ds_list_destroy(buffers);
ok = libmulti_quit(); // will also destroy all windows we didn't destroy ourselves.

if (ok) {
    show_debug_message("libmulti freed ok!");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test draw

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_white);

// here we draw inside the main window.
draw_text(32, 32, "libmulti by nkrapivindev, a demo,
this is the main game's window.
keys:
N - create New window
P - Poke last window
ESC - Quit (will also destroy all created windows)
wndclass;lasterror;fps = " + string(wndclass) + ";" + string(libmulti_last_error_code()) + ";" + string(fps));

// newline symbol to keep it 1.4-2 compatible...
var nl;
nl = chr(10);

for (var i = 0; i &lt; ds_list_size(windows); i++) {
    var _w, wx, wy, wcap, wstyle, wncarea, wexstyle, width, height, mx, my, surf, buff, str, xx, yy, instr, minw, minh;
    
    _w = ds_list_find_value(windows, i);
    if (!libmulti_exists(_w)) {
        continue; // the window's closing?
    }
    
    str = "";
    wx = libmulti_get_x(_w);
    wy = libmulti_get_y(_w);
    wcap = libmulti_get_caption(_w);
    wstyle = ptr(libmulti_get_window_style(_w, false));
    wexstyle = ptr(libmulti_get_window_style(_w, true));
    width = libmulti_get_width(_w);
    height = libmulti_get_height(_w);
    minw = libmulti_get_min_width(_w);
    minh = libmulti_get_min_height(_w);
    mx = libmulti_mouse_get_x(_w);
    my = libmulti_mouse_get_y(_w);
    surf = surface_create(width, height);
    buff = ds_list_find_value(buffers, i);
    instr = ds_list_find_value(inputs, i);
    
    wncarea[0] = libmulti_get_nonclient_left(_w);
    wncarea[1] = libmulti_get_nonclient_top(_w);
    wncarea[2] = libmulti_get_nonclient_right(_w);
    wncarea[3] = libmulti_get_nonclient_bottom(_w);
    
    // regular surface code as you would imagine.
    surface_set_target(surf);
    draw_clear(c_white); // don't need any alpha in a window duh.
    
    // the actual 'draw' window event is here
    draw_set_color(make_color_hsv((current_time/100 + i*5) mod 255, 255, 255));
    draw_rectangle(8, 8, 8 + 64, 8 + 64, false);
    
    xx = 8;
    yy = 8 + 64 + 8;
    draw_set_color(c_red);
    str = "a libmulti window, window id: " + string(_w) + nl
    + "x: " + string(wx) + nl
    + "y: " + string(wy) + nl
    + "width: " + string(width) + nl
    + "height: " + string(height) + nl
    + "min width: " + string(minw) + nl
    + "min height: " + string(minh) + nl
    + "mouse x: " + string(mx) + nl
    + "mouse y: " + string(my) + nl
    + "caption: " + wcap + nl
    + "style: " + string(wstyle) + nl
    + "extended style: " + string(wexstyle) + nl
    + "nonclient area offsets {x,y,width,height}: " + string(wncarea) + nl
    + "am I in focus? " + string(libmulti_has_focus(_w)) + nl
    + "am I an active window? " + string(libmulti_get_active_window() == _w) + nl
    + "my keyboard_string (type something!): " + instr + nl;
    draw_text(xx, yy, str);
    // and here it ends
    
    surface_reset_target();
    
    if (buffer_get_size(buff) != (width * height * 4)) {
        buffer_resize(buff, width * height * 4);
        // last used bytes fix.
        buffer_poke(buff, buffer_get_size(buff) - 1, buffer_u8, 0);
    }
    
    buffer_get_surface(buff, surf, 0, 0, 0);
    surface_free(surf);
    
    // send to the window
    libmulti_make_bitmap(_w, width, height, buffer_get_address(buff));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///poke a window

if (ds_list_size(windows) &lt; 1) exit;

var _lastw; _lastw = ds_list_find_value(windows, ds_list_size(windows) - 1);
if (!libmulti_exists(_lastw)) exit;

libmulti_set_caption(_lastw, "poke!");
libmulti_set_min_size(_lastw, 1024, 768);
libmulti_set_rectangle(_lastw, 64, 64, 1024, 768);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New window

var _defw, _defh;

// change this to your liking?
_defw = 800;
_defh = 600;

var _w, n;
_w = libmulti_create_window(
    -1, -1, // we don't care about x,y
    _defw, _defh, // width height
    -1, -1, -1, // style|extended style|sw_show we don't care
    320, 240, // min width min height, something regular
    -1, -1 // max width max height, we don't care
);

ds_list_add(windows, _w);
ds_list_add(buffers, buffer_create(_defw * _defh * 4, buffer_fixed, 1));
ds_list_add(inputs, "");

n = 10 + irandom(10);
libmulti_set_caption(_w, "libmulti window, you're just as cool as " + string(n) + " cats.");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///:(
show_debug_message("main window escape key pressed...");
game_end();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
